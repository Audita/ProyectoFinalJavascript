/**
 * @license
 * Copyright (C) 2016 Dizzy <itsdizzy40@gmail.com>
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file.
 */
"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var core_1 = require('@angular/core');
var common_1 = require('@angular/common');
var http_1 = require('@angular/http');
var router_1 = require('@angular/router');
var auth_config_1 = require('./auth.config');
var auth_guards_1 = require('./auth.guards');
var token_service_1 = require('./token.service');
var auth_http_1 = require('./auth.http');
var AuthModule = (function () {
    function AuthModule() {
    }
    AuthModule.forRoot = function (config) {
        return {
            ngModule: AuthModule,
            providers: [
                token_service_1.TokenService,
                {
                    provide: auth_http_1.AuthHttp,
                    useFactory: function (tokenService, http, options) {
                        return new auth_http_1.AuthHttp(new auth_config_1.AuthConfig(config), tokenService, http, options);
                    },
                    deps: [
                        token_service_1.TokenService,
                        http_1.Http,
                        http_1.RequestOptions
                    ]
                },
                {
                    provide: auth_guards_1.LoggedInAuthGuard,
                    useFactory: function (tokenService, router) {
                        return new auth_guards_1.LoggedInAuthGuard(new auth_config_1.AuthConfig(config), tokenService, router);
                    },
                    deps: [
                        token_service_1.TokenService,
                        router_1.Router
                    ]
                },
                {
                    provide: auth_guards_1.LoggedOutAuthGuard,
                    useFactory: function (tokenService, router) {
                        return new auth_guards_1.LoggedOutAuthGuard(new auth_config_1.AuthConfig(config), tokenService, router);
                    },
                    deps: [
                        token_service_1.TokenService,
                        router_1.Router
                    ]
                }
            ]
        };
    };
    AuthModule = __decorate([
        core_1.NgModule({
            imports: [
                common_1.CommonModule,
                http_1.HttpModule,
                router_1.RouterModule
            ],
            providers: [
                auth_guards_1.LoggedInAuthGuard,
                auth_guards_1.LoggedOutAuthGuard
            ]
        }), 
        __metadata('design:paramtypes', [])
    ], AuthModule);
    return AuthModule;
}());
exports.AuthModule = AuthModule;
//# sourceMappingURL=auth.module.js.map